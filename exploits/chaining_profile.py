# MINC - Exploit Chaining Profile Configuration

import json
import os

# File that contains the chaining profiles for various platforms
CHAINING_PROFILE_FILE = "config/chaining_profile.json"

# Default chaining profiles for various platforms
DEFAULT_PROFILES = {
    "windows": {
        "priority_chain": [
            "cve_2024_38063",
            "cve_2024_0743",
            "cve_2024_7891",
            "cve_2023_11111"
        ],
        "fallback_limit": 3,
        "auto_memory_drop": True
    },
    "linux": {
        "priority_chain": [
            "cve_2024_6387",
            "cve_2023_3169",
            "cve_2024_7891"
        ],
        "fallback_limit": 2,
        "auto_persistence": True
    },
    "wordpress": {
        "priority_chain": [
            "cve_2024_0743",
            "cve_2023_3169",
            "cve_2023_11111"
        ],
        "aggressive_mode_allowed": True,
        "fallback_limit": 2
    },
    "joomla": {
        "priority_chain": [
            "cve_2023_3169",
            "cve_2023_11111"
        ],
        "aggressive_mode_allowed": False,
        "fallback_limit": 2
    },
    "discuz": {
        "priority_chain": [
            "cve_2023_3169",
            "cve_2024_7891"
        ],
        "fallback_limit": 2,
        "auto_persistence": True
    },
    "dedecms": {
        "priority_chain": [
            "cve_2023_3169",
            "cve_2023_11111"
        ],
        "fallback_limit": 2,
        "auto_memory_drop": True
    },
    "metinfo": {
        "priority_chain": [
            "cve_2023_11111",
            "cve_2023_3169"
        ],
        "fallback_limit": 1,
        "tags": ["watch"]
    },
    "unknown": {
        "priority_chain": [
            "cve_2023_11111",
            "cve_2023_3169"
        ],
        "fallback_limit": 1,
        "tags": ["watch"]
    }
}

def load_chaining_profiles():
    """
    Loads the chaining profiles from the JSON file.
    If the file does not exist, return the default profiles.
    """
    if os.path.exists(CHAINING_PROFILE_FILE):
        with open(CHAINING_PROFILE_FILE, "r") as f:
            return json.load(f)
    else:
        print(f"[chaining_profile] Using default chaining profiles.")
        return DEFAULT_PROFILES

def save_chaining_profiles(profiles):
    """
    Saves the chaining profiles to the JSON file.
    """
    with open(CHAINING_PROFILE_FILE, "w") as f:
        json.dump(profiles, f, indent=2)
    print(f"[chaining_profile] Chaining profiles saved.")

def get_chain(profile_name, platform=None):
    """
    Returns the chaining profile for a given platform.
    If no platform is specified, the default profile is used.
    """
    profiles = load_chaining_profiles()

    if platform is None:
        platform = "unknown"

    platform_profile = profiles.get(platform, profiles["unknown"])

    # Check if the given profile exists in the current platform's chain
    if profile_name in platform_profile["priority_chain"]:
        return platform_profile["priority_chain"]
    else:
        print(f"[chaining_profile] Profile '{profile_name}' not found in the current chain.")
        return platform_profile["priority_chain"]

def update_chaining_profile(platform, new_chain):
    """
    Updates the chaining profile for a specific platform with a new chain.
    """
    profiles = load_chaining_profiles()

    if platform not in profiles:
        print(f"[chaining_profile] Platform '{platform}' does not exist. Adding new platform profile.")
        profiles[platform] = {}

    profiles[platform]["priority_chain"] = new_chain

    save_chaining_profiles(profiles)
    print(f"[chaining_profile] Platform '{platform}' chain updated.")

def add_platform_to_chain(platform_name, chain, auto_persistence=False, fallback_limit=3):
    """
    Adds a new platform with a given chain to the chaining profiles.
    """
    profiles = load_chaining_profiles()

    if platform_name in profiles:
        print(f"[chaining_profile] Platform '{platform_name}' already exists.")
    else:
        profiles[platform_name] = {
            "priority_chain": chain,
            "fallback_limit": fallback_limit,
            "auto_persistence": auto_persistence
        }

        save_chaining_profiles(profiles)
        print(f"[chaining_profile] Platform '{platform_name}' added with chain: {chain}")

